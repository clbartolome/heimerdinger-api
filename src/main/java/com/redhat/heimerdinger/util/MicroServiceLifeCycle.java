package com.redhat.heimerdinger.util;

import org.jboss.logging.Logger;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.event.Observes;

import io.quarkus.runtime.ShutdownEvent;
import io.quarkus.runtime.StartupEvent;
import io.quarkus.runtime.configuration.ProfileManager;

@ApplicationScoped
class MicroServiceLifeCycle {

  private static final Logger LOGGER = Logger.getLogger(MicroServiceLifeCycle.class);
  
  void onStart(@Observes StartupEvent ev) {
    LOGGER.info("");                                                                                           
    LOGGER.info(" ");
    LOGGER.info("                                                       ?");
    LOGGER.info("                                                 ?????????????");
    LOGGER.info("                                 ??????????????????????????????");
    LOGGER.info("                             ?????      ????????????????????????");
    LOGGER.info("                      ????????????     ????????????????????????????");
    LOGGER.info("                    ?????????????     ???????????????????????????????     ??");
    LOGGER.info("                  ???????????  ?? ?????????????????????????????????????   ???");
    LOGGER.info("                   ???????    ????????????????????????????????????????????????");
    LOGGER.info("              ?    ?????     ?????????????????????????????????????????????????");
    LOGGER.info("            ???    ????     ??? ???????????????????????????????????????????????");
    LOGGER.info("           ??     ???? ?  ?????????????????????????????????   ?????????????????");
    LOGGER.info("           ?     ?????  ?????????????????????????????????       ??????????????");
    LOGGER.info("          ??   ?????????? ???????????????????????????????       ??????????????");
    LOGGER.info("         ??      ??????? ???????????????????? ???????????????????????????????????");
    LOGGER.info("         ?   ?????????? ??????????????????   ?????????????????????????????????????");
    LOGGER.info("            ?????????? ??????????           ??????????????????????????????????????");
    LOGGER.info("          ???????????? ???????  ?         ????????????????????????????????????????");
    LOGGER.info("   ?     ???????????????????? ??   ?  ?? ????????????????????????????????????????");
    LOGGER.info("   ????????????????     ??????????? ?? ?????  ? ????????????????????????????????");
    LOGGER.info("    ?????????????           ?????????? ? ??  ?? ????????????????????????????????");
    LOGGER.info("    ???????????    ???????????????????  ???????????????????????????????????????");
    LOGGER.info("     ??????????  ???????????????   ?????????????????????????????????????????????");
    LOGGER.info("     ?????????  ???    ???????    ??????    ?????????????????????????????????????");
    LOGGER.info("      ????????????      ??????    ?????        ??????????????????????????????????");
    LOGGER.info("      ????????????      ??????   ?????         ??????????????????????????????????");
    LOGGER.info("       ????? ????????????????? ??????????    ????????????????????????????????????");
    LOGGER.info("        ?????????????????????????????????????????????????????????????????????????");
    LOGGER.info("           ? ???????????????????????????????????????????????????????????????????");
    LOGGER.info("             ??????????????????????????????????????????????????????????????????");
    LOGGER.info("             ?????????      ????     ??????????????????????????????????????????");
    LOGGER.info("               ????         ?????     ????????????????????????????????????????");
    LOGGER.info("                           ????????    ???????????????????????????????????  ??");
    LOGGER.info("                         ???????????   ??????????????????????????????????");
    LOGGER.info("                      ???????????????    ???????????????????????????????");
    LOGGER.info("            ??????????????????????????????????????????????????????  ???");
    LOGGER.info("              ?????????????   ???????????????????????????????? ?");
    LOGGER.info("                                ?????????????????????  ??????");
    LOGGER.info("                                     ???        ??  ??      ??");
    LOGGER.info("                                                 ?");
    LOGGER.info("   __         _                         ___                                         _ ");
    LOGGER.info("   / /_  ___  (_)___ ___  ___  _________/ (_)___  ____ ____  _____      ____ _____  (_)");
    LOGGER.info("  / __ \\/ _ \\/ / __ `__ \\/ _ \\/ ___/ __  / / __ \\/ __ `/ _ \\/ ___/_____/ __ `/ __ \\/ / ");
    LOGGER.info(" / / / /  __/ / / / / / /  __/ /  / /_/ / / / / / /_/ /  __/ /  /_____/ /_/ / /_/ / /  ");
    LOGGER.info("/_/ /_/\\___/_/_/ /_/ /_/\\___/_/   \\__,_/_/_/ /_/\\__, /\\___/_/         \\__,_/ .___/_/   ");
    LOGGER.info("                                               /____/                     /_/    ");


    LOGGER.infof("The Heimerdinger API is starting with profile: %s", ProfileManager.getActiveProfile());
    LOGGER.info("");
  }

  void onStop(@Observes ShutdownEvent ev) {
      LOGGER.info("The Order API is stopping   ");
  }
}

